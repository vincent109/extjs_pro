/*
 * File: app/view/CompanyGrid.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Sencha.view.CompanyGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.companygrid',
    requires: [
	'Ext.ux.grid.HeaderToolTip'
           ],
    stateId: 'stateGrid',
    width:800,
    collapsible: true,
    plugins: ['headertooltip'],
    title: 'Grid实例',
    store: 'Companies',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'company',
                    flex:1,
                    text: '公司',
                    tooltip: '公司名称',
                    renderer: function(value, metaData, data) {
                    	var cname = value;
                    	if(value.length>10){
                    		 metaData.tdAttr = 'data-qtip="'+value+'"';
                    		cname = value.substring(0,10)+"...";
                    	}
                        return cname;
                    },
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.usMoney(value);
                    },
                    width: 75,
                    dataIndex: 'price',
                    text: '价格',
                    tooltip: '价格'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if (value > 0) {
                            return '<span style="color:green;">' + value + '</span>';
                        } else if (value < 0) {
                            return '<span style="color:red;">' + value + '</span>';
                        }
                        return value;
                    },
                    width: 75,
                    dataIndex: 'change',
                    text: '变化'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                       /* if (value > 0) {
                            return '<span style="color:green;">' + value + '%</span>';
                        } else if (value < 0) {
                            return '<span style="color:red;">' + value + '%</span>';
                        }*/
                    	if (value > 0) {
                    		metaData.style='background-color:#42E61A';
                    	}else{
                    		metaData.style='background-color:#F79709';
                    	}                    	
                        return value+'%';
                    },
                    width: 75,
                    dataIndex: 'pctChange',
                    text: '变化百分比'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    dataIndex: 'progress',
                    text: '进度',                 
                    renderer: function (value, metaData, record) {                     
                    	var id = Ext.id(); 
                    	metaData.tdAttr = 'data-qtip="'+value+'%"';
                    	Ext.defer(function () {                         
                    		Ext.widget('progressbar', {
                    			renderTo: id,
                    			value: value / 100, 
                    			height:20,
                    			width: 100,
                    			text:value+'%'
                    			});                     
                    		}, 50);                     
                    	return Ext.String.format('<div height=20 id="{0}"></div>', id);
                    	} 
                },
                {
                    xtype: 'actioncolumn',
                    width: 50,
                    sortable: false,
                    menuDisabled: true,
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e) {
                                this.fireEvent('itemclick', this, 'sell', view, rowIndex, colIndex, item, e);
                            },
                            icon: 'images/fam/delete.gif',
                            tooltip: 'Sell stock'
                        },
                        {
                            getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                                if (r.get('change') < 0) {
                                    this.items[1].tooltip = 'Hold stock';
                                    return 'alert-col';
                                } else {
                                    this.items[1].tooltip = 'Buy stock';
                                    return 'buy-col';
                                }
                            },
                            handler: function(view, rowIndex, colIndex, item, e) {
                                var rec = view.getRecords(view.getNodes())[rowIndex];
                                var action = rec.get('change') < 0 ? 'hold' : 'buy';
                                this.fireEvent('itemclick', this, action, view, rowIndex, colIndex, item, e);
                            }
                        }
                    ]
                }
            ],
            viewConfig: {
                enableTextSelection: 'true',
                getRowClass:function(record, index, rowParams, store){
                	return record.get('change')>0?"row-s":"row-f";
                }
            }
        });

        me.callParent(arguments);
    }

});